#!/usr/bin/env groovy

pipeline {
    agent {
        label 'slave-group-release'
    }

    parameters {
        string(name: 'version', defaultValue: '', description: 'Release version')
        string(name: 'nextVersion', defaultValue: '', description: 'Next working version')
        gitParameter(name: 'branch', defaultValue: 'origin/main', branchFilter: 'origin/(.*)', type: 'PT_BRANCH', description: 'Branch to release from')
    }

    stages {
        stage('Prepare') {
            steps {
                script {
                    env.MAVEN_HOME = tool('Maven')
                    env.MAVEN_OPTS = "-Xmx1g -XX:+HeapDumpOnOutOfMemoryError"
                    env.JAVA_HOME = tool('JDK 11')
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Version') {
            steps {
                sh "$MAVEN_HOME/bin/mvn -B -V versions:set -DnewVersion=${params.version} -DprocessAllModules=true"
            }
        }

        stage('Deploy') {
            steps {
                configFileProvider([configFile(fileId: 'maven-settings-with-deploy-release', variable: 'MAVEN_SETTINGS')]) {
                    sh "$MAVEN_HOME/bin/mvn -B -V -s '$MAVEN_SETTINGS' -Pcommunity-release -DskipTests clean deploy"
                }
            }
        }

        stage('Tag') {
            steps {
                sh "$MAVEN_HOME/bin/mvn -B -V scm:checkin -Dmessage=\"Releasing version ${params.version}\" -DpushChanges=false"
                sh "$MAVEN_HOME/bin/mvn -B -V scm:tag -Dtag=${params.version}"
            }
        }

        stage('Next version') {
            steps {
                script {
                    sh "$MAVEN_HOME/bin/mvn -B -V versions:set -DnewVersion=${params.nextVersion} -DprocessAllModules=true"
                    sh "$MAVEN_HOME/bin/mvn -B -V -Dmessage='Next version ${params.nextVersion}' -DscmVersion=${params.branch} -DscmVersionType=branch scm:checkin"
                }
            }
        }
    }

    post {
        always {
            // Clean
            sh 'git clean -fdx -e "*.hprof" || echo "git clean failed, exit code $?"'
        }
        failure {
            echo "post build status: failure"
            emailext to: '${DEFAULT_RECIPIENTS}', subject: '${DEFAULT_SUBJECT}', body: '${DEFAULT_CONTENT}'
        }

        success {
            echo "post build status: success"
            emailext to: '${DEFAULT_RECIPIENTS}', subject: '${DEFAULT_SUBJECT}', body: '${DEFAULT_CONTENT}'
        }
    }
}
